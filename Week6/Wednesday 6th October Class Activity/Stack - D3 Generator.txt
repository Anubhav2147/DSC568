 Week five. It's horizontal bar chart, stacked bar chart. So I've already gone through it and added the SVG element along with the styles for it. And I have defined the view box as you can see. So let's write down the steps that we want to go through so we can have an index for each one of the steps. First I'm going to select the SVG element, then read this CSV files and convert the data types. And I'll use the stack generator to stack data. Then I will get the minimum and maximum for the stack bar chart to create the scaling function. After Dad, I'm going to go ahead and add their demands to SVG element there rectangles and the groups. So after doing that, I'm going to have the bar chart. So I'll need margins to put a ray from the borders of the SVG. And after adding the margin and bringing the visualization to the middle of the screen at the axis and applied it colors, uh, probably the lap lighter colors before adenine in the margins. So simply I'll use D3 to oscillate to static SVG element everyday to selecting the elements, I'm going to load the data. And I'm going to use then function along with an asynchronous callback function. In order to convert the data types and just going to use an outer callback function. You don't need to type all the column names, so I just copied from the source file. There are problems here that our date is five digit, four digit year, and two-digit month. So we want to convert it to appropriate data object. So I'm going to use D3 that time parse. The rest of the columns are going to be number. So let's cancel out the data and see how I got the data correctly converted. 21 rows. And the beta column is correct, we convert it to the data object. Now let's go to step three and you as a stack generator to create a generator function. I just bringing the keys by copying and pasting and now that I have the keys, let's go to the next step and create the minmax. Prior to that, actually we have to convert the data. So I'm just going to use this AC generator and passing the data. So it's going to be call, I have called it phase. So this console.log the stack series and see if it's being incorrectly. Thank you. Yeah. So 0 is for the starting point of the rectangle and one for the ending point for each one of these tags. Now, our data is two-dimensional. So finding the minimum and maximum is going to be able to that difficult. Initially, we get the minimum for each from that maximum for each row and then get the maximum for all the elements. So in each row I'm just going to go and look for the ones in, and just going to keep these heroes. And after finding goal that the maximum of all the ones, then I go ahead and find the maximum of all rows that have minimum and maximum for x. Let's print it out and see if it is correct. No, there's something wrong. They have this spelling. A typo. Min-max is query. So let's go ahead and create this scaling function. Let's do wide-scale forest wishes a timescale. So I use D3 to the scale of time. And for my domain and my range, I'm just going to use D3 extend and, and the ranges inside the view box. So D3, to the extent I pass into data and use a callback function, and I get data date. And for the minimum and maximum for why scale, I'm just gonna type 0600 for the min and max. Thing is here that because 0 is the top and 600 is going to be the bottom of the charge. Let's replace Dan. So have it upside down, which looks nicer than it looks like an actual bar chart valuable from minimum to maximum date. Now that the a-ha, wide-scale, this created exit scale. Use linear scaling here, which is going to convert data into linear format. And for domain I'm going to use 0 and maximum. Well actually then for range and we're going to use 0 and on Townsend. So let's go ahead and append that groups to SVG elements. In order to do so, I pass in beta into a group. So I'm going to have four groups. Each group for one is tack our actually 11 column. So actually, after having four, geez, if you look at the data section, we see that the data is already there with these evil and the one. And now if you go ahead and start adding rectangles to each one of the groups, the detail we can refer to the, the call back function saying that function d. So this way we can go ahead and fetch the data from inside the data that we got there, we have the data attached to rectangular elements. Now we can use and tear and append to append the rectangle elements today to each one of these groups. So x is going to be the left side of each rectangle. Y is going to be the y for each of the rectangles lower-left side. So for x, I'm just gonna go Guan Yu's exa scale and passing the 0 with which is the beginning of each one of this tax rectangles, beginning by mean here means the left part of it. And then for y I'm going to use, I'm just gonna get a beat from the actual data and then convert it using waste kill. And for week I'm gonna deduct why D1 from DDO, the get beat up each one of these rectangles. For hide, I'm just gonna put in 20 manually. K looks like it's nice and everything looks okay. Let's go ahead and kind of style that fish that we get some color retrievable. So in order to do so via lecture, require an array of colors, where a dictionary of colors sign here I have here is just an array of colors. Let's find some nice pallets from internet. And I go to color Hans death CO. And yeah, this one isn't nice fun. Let's create over array and add them one by one. From button to top. Ned Ed, I have added my array. I can go and refer to each one of the colors using. Ireland end I argument of the callback function. So it's going to be i ith element. And now it looks, it's, we're keen. There's small change that I want to make and that is I want to scale them separately rather than, I mean, when I, when I deduct it, I just want to scale and ended up in I got to make sure that escaping is Craig. Not at read it. That's I think everything is fine. We can go ahead and add the margins. And in order to do so, let's look at how the visualization is placed inside SVG. It is corner to corner. So let's just add some rights left, top and bottom. Spacing using margins. Site created one dictionary and go to waste kale and try to change the way scale such that it just calculate the values until the border minus the margin from button and until to the border from top S3, you refresh the page. It looks nice. It can have a little bit more space from top and from button. It probably would be better to have more space because you're going to have the ticks and then the numbers and labeled and actually so this go increase the margin. That's that first there, left and right margin to, to, to exist scale. And he looks nice. Now I'm going to go and edits margin of bits. From the left. You're going to have the labels for y axis and plunder button. We're going to have the labels for x-axis. So I'm just increasing the margin to 50. Net epi have modified the margins. Let's go and add axes. Adding Xist is pretty easy. But as I'm going to shift the axis as likely to match victim margins, I'm going to place them on a separate group. So I appended group to SVG and I call my d3 dot axis left. And I pass in. My wife came for access left. So it is placed, as you can see, it's edited it off from the chart itself. Because we have applied margins to the chart school and transformed, enlarging it, transform it to the margins. So I'm going to use translates for the transformation. I'm gonna translate exam y by the m until the exam y. So x is going to be marginal there and y is going to be pretty particular case, margin from top. Say Luke's matching well. And then let's do the same thing for axis of that button. And I already applied the colors so you can just mark. I like common task is to be made of a, I'm going to need a class to change the size of the funds for YX is sum adding a class to, to cold y-axis. So let's add x axis to this VGA. Repeat the same steps I did it for Y-axis in X axis, I'm going to call axis bottom and pass exist k. Let's see how, how I'm going to try and how we're gonna tress transform it such that it fits with our map or visualization. So we just bring it equal to the height minus the margins plus the top margin. So it's going to be 600 minus bottom plus the margin. At the top margin. Absolute errors. Okay? Yeah, top margin is not applied. Margin to my agenda. Let's think everything is nice and styles to our visualization. So you go This tiles and add new classes. I'm a first-class is YX if they can actually use one class for both of them. But in this case C. No, there's, let's just do separate classes so we can control them better. So this changed. That's at play, some animation. So I'm going to use transition, delay and duration. So transition works like this that you have. Let's say we have one element already added and then we have an attribute for it. And then after transition, the attribute is going to be a new attribute that is brought after it. So I'm going to add the week before and after to transition and before the transition, I'm gonna set it to 0. So that's it. During the transition it gets an animation that increases the wheat. Me changed. This is, it looks nice, but the thing is here that I want them to start from 0 at x is equal to 0. So let's add x is equal to 0 before the transition. And can I make it equal to 0 on the, of course it's not going to be okay because I already have margins. So that's at the left margin. Margins length. Okay, so it looks nice. K over visualization is ready. Week five. It's horizontal bar chart, stacked bar chart. So I've already gone through it and added the SVG element along with the styles for it. And I have defined the view box as you can see. So let's write down the steps that we want to go through so we can have an index for each one of the steps. First I'm going to select the SVG element, then read this CSV files and convert the data types. And I'll use the stack generator to stack data. Then I will get the minimum and maximum for the stack bar chart to create the scaling function. After Dad, I'm going to go ahead and add their demands to SVG element there rectangles and the groups. So after doing that, I'm going to have the bar chart. So I'll need margins to put a ray from the borders of the SVG. And after adding the margin and bringing the visualization to the middle of the screen at the axis and applied it colors, uh, probably the lap lighter colors before adenine in the margins. So simply I'll use D3 to oscillate to static SVG element everyday to selecting the elements, I'm going to load the data. And I'm going to use then function along with an asynchronous callback function. In order to convert the data types and just going to use an outer callback function. You don't need to type all the column names, so I just copied from the source file. There are problems here that our date is five digit, four digit year, and two-digit month. So we want to convert it to appropriate data object. So I'm going to use D3 that time parse. The rest of the columns are going to be number. So let's cancel out the data and see how I got the data correctly converted. 21 rows. And the beta column is correct, we convert it to the data object. Now let's go to step three and you as a stack generator to create a generator function. I just bringing the keys by copying and pasting and now that I have the keys, let's go to the next step and create the minmax. Prior to that, actually we have to convert the data. So I'm just going to use this AC generator and passing the data. So it's going to be call, I have called it phase. So this console.log the stack series and see if it's being incorrectly. Thank you. Yeah. So 0 is for the starting point of the rectangle and one for the ending point for each one of these tags. Now, our data is two-dimensional. So finding the minimum and maximum is going to be able to that difficult. Initially, we get the minimum for each from that maximum for each row and then get the maximum for all the elements. So in each row I'm just going to go and look for the ones in, and just going to keep these heroes. And after finding goal that the maximum of all the ones, then I go ahead and find the maximum of all rows that have minimum and maximum for x. Let's print it out and see if it is correct. No, there's something wrong. They have this spelling. A typo. Min-max is query. So let's go ahead and create this scaling function. Let's do wide-scale forest wishes a timescale. So I use D3 to the scale of time. And for my domain and my range, I'm just going to use D3 extend and, and the ranges inside the view box. So D3, to the extent I pass into data and use a callback function, and I get data date. And for the minimum and maximum for why scale, I'm just gonna type 0600 for the min and max. Thing is here that because 0 is the top and 600 is going to be the bottom of the charge. Let's replace Dan. So have it upside down, which looks nicer than it looks like an actual bar chart valuable from minimum to maximum date. Now that the a-ha, wide-scale, this created exit scale. Use linear scaling here, which is going to convert data into linear format. And for domain I'm going to use 0 and maximum. Well actually then for range and we're going to use 0 and on Townsend. So let's go ahead and append that groups to SVG elements. In order to do so, I pass in beta into a group. So I'm going to have four groups. Each group for one is tack our actually 11 column. So actually, after having four, geez, if you look at the data section, we see that the data is already there with these evil and the one. And now if you go ahead and start adding rectangles to each one of the groups, the detail we can refer to the, the call back function saying that function d. So this way we can go ahead and fetch the data from inside the data that we got there, we have the data attached to rectangular elements. Now we can use and tear and append to append the rectangle elements today to each one of these groups. So x is going to be the left side of each rectangle. Y is going to be the y for each of the rectangles lower-left side. So for x, I'm just gonna go Guan Yu's exa scale and passing the 0 with which is the beginning of each one of this tax rectangles, beginning by mean here means the left part of it. And then for y I'm going to use, I'm just gonna get a beat from the actual data and then convert it using waste kill. And for week I'm gonna deduct why D1 from DDO, the get beat up each one of these rectangles. For hide, I'm just gonna put in 20 manually. K looks like it's nice and everything looks okay. Let's go ahead and kind of style that fish that we get some color retrievable. So in order to do so via lecture, require an array of colors, where a dictionary of colors sign here I have here is just an array of colors. Let's find some nice pallets from internet. And I go to color Hans death CO. And yeah, this one isn't nice fun. Let's create over array and add them one by one. From button to top. Ned Ed, I have added my array. I can go and refer to each one of the colors using. Ireland end I argument of the callback function. So it's going to be i ith element. And now it looks, it's, we're keen. There's small change that I want to make and that is I want to scale them separately rather than, I mean, when I, when I deduct it, I just want to scale and ended up in I got to make sure that escaping is Craig. Not at read it. That's I think everything is fine. We can go ahead and add the margins. And in order to do so, let's look at how the visualization is placed inside SVG. It is corner to corner. So let's just add some rights left, top and bottom. Spacing using margins. Site created one dictionary and go to waste kale and try to change the way scale such that it just calculate the values until the border minus the margin from button and until to the border from top S3, you refresh the page. It looks nice. It can have a little bit more space from top and from button. It probably would be better to have more space because you're going to have the ticks and then the numbers and labeled and actually so this go increase the margin. That's that first there, left and right margin to, to, to exist scale. And he looks nice. Now I'm going to go and edits margin of bits. From the left. You're going to have the labels for y axis and plunder button. We're going to have the labels for x-axis. So I'm just increasing the margin to 50. Net epi have modified the margins. Let's go and add axes. Adding Xist is pretty easy. But as I'm going to shift the axis as likely to match victim margins, I'm going to place them on a separate group. So I appended group to SVG and I call my d3 dot axis left. And I pass in. My wife came for access left. So it is placed, as you can see, it's edited it off from the chart itself. Because we have applied margins to the chart school and transformed, enlarging it, transform it to the margins. So I'm going to use translates for the transformation. I'm gonna translate exam y by the m until the exam y. So x is going to be marginal there and y is going to be pretty particular case, margin from top. Say Luke's matching well. And then let's do the same thing for axis of that button. And I already applied the colors so you can just mark. I like common task is to be made of a, I'm going to need a class to change the size of the funds for YX is sum adding a class to, to cold y-axis. So let's add x axis to this VGA. Repeat the same steps I did it for Y-axis in X axis, I'm going to call axis bottom and pass exist k. Let's see how, how I'm going to try and how we're gonna tress transform it such that it fits with our map or visualization. So we just bring it equal to the height minus the margins plus the top margin. So it's going to be 600 minus bottom plus the margin. At the top margin. Absolute errors. Okay? Yeah, top margin is not applied. Margin to my agenda. Let's think everything is nice and styles to our visualization. So you go This tiles and add new classes. I'm a first-class is YX if they can actually use one class for both of them. But in this case C. No, there's, let's just do separate classes so we can control them better. So this changed. That's at play, some animation. So I'm going to use transition, delay and duration. So transition works like this that you have. Let's say we have one element already added and then we have an attribute for it. And then after transition, the attribute is going to be a new attribute that is brought after it. So I'm going to add the week before and after to transition and before the transition, I'm gonna set it to 0. So that's it. During the transition it gets an animation that increases the wheat. Me changed. This is, it looks nice, but the thing is here that I want them to start from 0 at x is equal to 0. So let's add x is equal to 0 before the transition. And can I make it equal to 0 on the, of course it's not going to be okay because I already have margins. So that's at the left margin. Margins length. Okay, so it looks nice. K over visualization is ready.